// <auto-generated />
using System;
using Labb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Labb.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210201010528_Mig")]
    partial class Mig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Labb.Data.Utilizador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BloqueadoDuracao")
                        .HasColumnName("bloqueado_duracao")
                        .HasColumnType("datetime2");

                    b.Property<string>("BloqueadoRazao")
                        .HasColumnName("bloqueado_razao")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool?>("BloqueadoValor")
                        .HasColumnName("bloqueado_valor")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Labb.Models.Administrador", b =>
                {
                    b.Property<int>("IdUtilizador")
                        .HasColumnName("id_Utilizador")
                        .HasColumnType("int");

                    b.HasKey("IdUtilizador")
                        .HasName("PK__Administ__254574288B0EC1BA");

                    b.ToTable("Administrador");
                });

            modelBuilder.Entity("Labb.Models.Cliente", b =>
                {
                    b.Property<int>("IdUtilizador")
                        .HasColumnName("id_Utilizador")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdUtilizador")
                        .HasName("PK__Cliente__2545742888451838");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Labb.Models.PratoDoDium", b =>
                {
                    b.Property<int>("IdPrato")
                        .HasColumnName("id_Prato")
                        .HasColumnType("int");

                    b.Property<bool>("Apagado")
                        .HasColumnName("apagado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataPrato")
                        .HasColumnName("data_prato")
                        .HasColumnType("date");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasColumnName("foto")
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<decimal>("Preco")
                        .HasColumnName("preco")
                        .HasColumnType("money");

                    b.Property<string>("TipoPrato")
                        .IsRequired()
                        .HasColumnName("tipo_prato")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int?>("restauranteIdUtilizador")
                        .HasColumnType("int");

                    b.HasKey("IdPrato")
                        .HasName("PK__PratoDoD__F8A3CCADC548BD1D");

                    b.HasIndex("restauranteIdUtilizador");

                    b.ToTable("PratoDoDia");
                });

            modelBuilder.Entity("Labb.Models.PratoFavorito", b =>
                {
                    b.Property<int>("IdCliente")
                        .HasColumnName("id_Cliente")
                        .HasColumnType("int");

                    b.Property<int>("IdPrato")
                        .HasColumnName("id_Prato")
                        .HasColumnType("int");

                    b.HasKey("IdCliente", "IdPrato")
                        .HasName("PK__Prato_Fa__F8064C9E76D9AA51");

                    b.HasIndex("IdPrato");

                    b.ToTable("Prato_Favorito");
                });

            modelBuilder.Entity("Labb.Models.Restaurante", b =>
                {
                    b.Property<int>("IdUtilizador")
                        .HasColumnName("id_Utilizador")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DiaDescanso")
                        .IsRequired()
                        .HasColumnName("dia_descanso")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasColumnName("foto")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Gps")
                        .IsRequired()
                        .HasColumnName("gps")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("HoraDeAbertura")
                        .IsRequired()
                        .HasColumnName("hora_de_abertura")
                        .HasColumnType("char(5)")
                        .IsFixedLength(true)
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("HoraDeFecho")
                        .IsRequired()
                        .HasColumnName("hora_de_fecho")
                        .HasColumnType("char(5)")
                        .IsFixedLength(true)
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Morada")
                        .IsRequired()
                        .HasColumnName("morada")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal>("Telefone")
                        .HasColumnName("telefone")
                        .HasColumnType("numeric(9, 0)");

                    b.Property<bool?>("TipoEntrega")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tipo_entrega")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("TipoLocal")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tipo_local")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("TipoTakeaway")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tipo_takeaway")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("Validado")
                        .HasColumnName("validado")
                        .HasColumnType("bit");

                    b.Property<int?>("adminIdUtilizador")
                        .HasColumnType("int");

                    b.HasKey("IdUtilizador")
                        .HasName("PK__Restaura__254574289C9A4CB1");

                    b.HasIndex("adminIdUtilizador");

                    b.ToTable("Restaurante");
                });

            modelBuilder.Entity("Labb.Models.RestauranteFavorito", b =>
                {
                    b.Property<int>("IdRestaurante")
                        .HasColumnName("id_Restaurante")
                        .HasColumnType("int");

                    b.Property<int>("IdCliente")
                        .HasColumnName("id_Cliente")
                        .HasColumnType("int");

                    b.HasKey("IdRestaurante", "IdCliente")
                        .HasName("PK__Restaura__4F606914AE57BBBB");

                    b.HasIndex("IdCliente");

                    b.ToTable("Restaurante_Favorito");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Labb.Models.Administrador", b =>
                {
                    b.HasOne("Labb.Data.Utilizador", "IdUtilizadorNavigation")
                        .WithOne("Administrador")
                        .HasForeignKey("Labb.Models.Administrador", "IdUtilizador")
                        .HasConstraintName("FK__Administr__id_Ut__286302EC")
                        .IsRequired();
                });

            modelBuilder.Entity("Labb.Models.Cliente", b =>
                {
                    b.HasOne("Labb.Data.Utilizador", "IdUtilizadorNavigation")
                        .WithOne("Cliente")
                        .HasForeignKey("Labb.Models.Cliente", "IdUtilizador")
                        .HasConstraintName("FK__Cliente__id_Util__2B3F6F97")
                        .IsRequired();
                });

            modelBuilder.Entity("Labb.Models.PratoDoDium", b =>
                {
                    b.HasOne("Labb.Models.Restaurante", "restaurante")
                        .WithMany("listaPratos")
                        .HasForeignKey("restauranteIdUtilizador");
                });

            modelBuilder.Entity("Labb.Models.PratoFavorito", b =>
                {
                    b.HasOne("Labb.Models.Cliente", "IdClienteNavigation")
                        .WithMany("PratoFavoritos")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("FK__Prato_Fav__id_Cl__44FF419A")
                        .IsRequired();

                    b.HasOne("Labb.Models.PratoDoDium", "IdPratoNavigation")
                        .WithMany("PratoFavoritos")
                        .HasForeignKey("IdPrato")
                        .HasConstraintName("FK__Prato_Fav__id_Pr__45F365D3")
                        .IsRequired();
                });

            modelBuilder.Entity("Labb.Models.Restaurante", b =>
                {
                    b.HasOne("Labb.Data.Utilizador", "IdUtilizadorNavigation")
                        .WithOne("Restaurante")
                        .HasForeignKey("Labb.Models.Restaurante", "IdUtilizador")
                        .HasConstraintName("FK__Restauran__id_Ut__35BCFE0A")
                        .IsRequired();

                    b.HasOne("Labb.Models.Administrador", "admin")
                        .WithMany()
                        .HasForeignKey("adminIdUtilizador");
                });

            modelBuilder.Entity("Labb.Models.RestauranteFavorito", b =>
                {
                    b.HasOne("Labb.Models.Cliente", "IdClienteNavigation")
                        .WithMany("RestauranteFavoritos")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("FK__Restauran__id_Cl__4222D4EF")
                        .IsRequired();

                    b.HasOne("Labb.Models.Restaurante", "IdRestauranteNavigation")
                        .WithMany("RestauranteFavoritos")
                        .HasForeignKey("IdRestaurante")
                        .HasConstraintName("FK__Restauran__id_Re__412EB0B6")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Labb.Data.Utilizador", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Labb.Data.Utilizador", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labb.Data.Utilizador", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Labb.Data.Utilizador", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
